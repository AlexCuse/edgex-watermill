package core

import (
	"context"
	"github.com/ThreeDotsLabs/watermill/message"
	"github.com/edgexfoundry/go-mod-messaging/v2/pkg/types"
	"github.com/stretchr/testify/mock"
)

// Code generated by mockery v2.5.1. DO NOT EDIT.
// unless it can't QUITE do what you want :P

// mockPublisher is an autogenerated mock type for the mockPublisher type
type mockPublisher struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *mockPublisher) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: topic, messages
func (_m *mockPublisher) Publish(topic string, messages ...*message.Message) error {
	_va := make([]interface{}, len(messages))
	for _i := range messages {
		_va[_i] = messages[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, topic)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...*message.Message) error); ok {
		r0 = rf(topic, messages...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSubscriber is an autogenerated mock type for the mockSubscriber type
type mockSubscriber struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *mockSubscriber) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, topic
func (_m *mockSubscriber) Subscribe(ctx context.Context, topic string) (<-chan *message.Message, error) {
	ret := _m.Called(ctx, topic)

	var r0 chan *message.Message
	if rf, ok := ret.Get(0).(func(context.Context, string) chan *message.Message); ok {
		r0 = rf(ctx, topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *message.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockMarshaler is an autogenerated mock type for the WatermillMarshaler type
type mockMarshaler struct {
	mock.Mock
}

// Execute provides a mock function with given fields: envelope
func (_m *mockMarshaler) Execute(envelope types.MessageEnvelope) (*message.Message, error) {
	ret := _m.Called(envelope)

	var r0 *message.Message
	if rf, ok := ret.Get(0).(func(types.MessageEnvelope) *message.Message); ok {
		r0 = rf(envelope)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*message.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(types.MessageEnvelope) error); ok {
		r1 = rf(envelope)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockUnmarshaler is an autogenerated mock type for the WatermillUnmarshaler type
type mockUnmarshaler struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0
func (_m *mockUnmarshaler) Execute(_a0 *message.Message) (types.MessageEnvelope, error) {
	ret := _m.Called(_a0)

	var r0 types.MessageEnvelope
	if rf, ok := ret.Get(0).(func(*message.Message) types.MessageEnvelope); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.MessageEnvelope)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*message.Message) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
